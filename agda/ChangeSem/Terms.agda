{-# OPTIONS --postfix-projections #-}
module ChangeSem.Terms where

open import Cat
open import ChangeCat
open import ChangeSem.Types
open import Changes
open import Datafun
open import Monads
open import Prelude
open import Prosets
open import TreeSet

 -- Lemmas for semantics of terms
-- ‚ü¶_‚üß is a functor, Cx^op -> Change
comap‚ü¶_‚üß : ‚àÄ{X Y} -> X ‚äÜ Y -> ‚ü¶ Y ‚üß ‚â§ ‚ü¶ X ‚üß
comap‚ü¶ f ‚üß = prefixŒ† {P = ‚ü¶_‚üßv} (‚àÉ-map f)

-- Managing environments.
lookup : ‚àÄ{X x} -> X x -> ‚ü¶ X ‚üß ‚â§ ‚ü¶ x ‚üß‚ÇÅ
lookup p = Œ†e (Var p)

cons : ‚àÄ{X Y} -> ‚ü¶ X ‚üß ‚àß ‚ü¶ Y ‚üß ‚â§ ‚ü¶ Y ‚à™ X ‚üß
cons = Œ†i {P = ‚ü¶_‚üßv} Œª { (, inj‚ÇÅ x) ‚Üí œÄ‚ÇÇ ‚Ä¢ lookup x ; (, inj‚ÇÇ y) ‚Üí œÄ‚ÇÅ ‚Ä¢ lookup y }

singleton : ‚àÄ{x} -> ‚ü¶ x ‚üß‚ÇÅ ‚â§ ‚ü¶ hyp x ‚üß
singleton = Œ†i duh
 where duh : ‚àÄ{x} (v : Vars (hyp x)) -> ‚ü¶ x ‚üß‚ÇÅ ‚â§ ‚ü¶ v ‚üßv
       duh (Var refl) = id

-- Lemmas for wipe‚â§‚ñ°.
Œ†/‚ñ° : ‚àÄ{A} P -> Œ† A (Œª a -> change‚ñ° (P a)) ‚â§ change‚ñ° (Œ† A P)
-- I find this slightly incomprehensible myself.
Œ†/‚ñ° _ = cfun (fun Œ†/‚àß) (œÄ‚ÇÇ ‚Ä¢ fun Œ†/‚àß) (Œ†/‚àß ‚Ä¢ map‚àß id Œ†/‚àß)

Œ†‚â§‚ñ° : ‚àÄ{A P} -> (‚àÄ a -> P a ‚â§ change‚ñ° (P a)) -> Œ† A P ‚â§ change‚ñ° (Œ† A P)
Œ†‚â§‚ñ° {P = P} F = suffixŒ† F ‚Ä¢ Œ†/‚ñ° P

wipevar : ‚àÄ{X} (v : Vars (wipe X)) -> ‚ü¶ v ‚üßv ‚â§ change‚ñ° ‚ü¶ v ‚üßv
wipevar (Var {mono} ())
wipevar (Var {disc} p) = dup Change‚ñ°

wipe‚â§‚ñ° : ‚àÄ{X} -> ‚ü¶ wipe X ‚üß ‚â§ change‚ñ° ‚ü¶ wipe X ‚üß
wipe‚â§‚ñ° = Œ†‚â§‚ñ° wipevar

lambda : ‚àÄ{c x} -> ‚ü¶ hyp x ‚üß ‚á® c ‚â§ ‚ü¶ x ‚üß‚ÇÅ ‚á® c
lambda {c} = precompose {c = c} singleton

-- this is wrong and should be destroyed
module _ {A : Change} (f g : ‚ä§-change ‚â§ A) (d : Hom! (‚ä§-change ‚á® A) (funct f) (funct g)) where
  private instance aaa = A; daa = ùë´ A
  from-bool : change-bool ‚â§ A
  from-bool .funct = bool‚áí (Hom!.a‚â§b d _)
  from-bool .deriv .ap (x , dx) =
    (if x then g .deriv
    else if dx then Hom!.path d
    else f .deriv) .ap _
  from-bool .deriv .map ((false<true , ()) , _)
  from-bool .deriv .map ((, refl) , refl) = id
  from-bool .deriv .map {true , _} ((, refl) , _) = id
  -- gah! I need to know that (Œ¥f tt ‚â§ d)!
  from-bool .deriv .map {false , _} ((refl , refl) , false<true) = {!!}
  from-bool .is-id da:a‚Üíb = {!!}

-- from-bool : ‚àÄ{A a b ida idb da} -> Hom (ùë∂ A) a b
--           -> Path A ida a a -> Path A idb b b -> Path A da a b
--           -> change-bool ‚â§ A
-- from-bool a‚â§b _ _ _ .funct = bool‚áí a‚â§b
-- from-bool {ida = ida} {idb = idb} {da} _ _ _ _ .deriv .ap (x , dx) =
--   if x then idb else if dx then da else ida
-- from-bool _ _ _ _ .deriv .map = {!!}
-- from-bool _ _ _ _ .is-id = {!!}

-- -- Need it to be a decidable semilattice!
-- from-bool : ‚àÄ{a} (S : IsSL a) -> change-bool ‚â§ a ‚á® a
-- from-bool sl .funct .ap false = constant (Sums.init (ùë∂-sums sl))
-- from-bool sl .funct .ap true = {!!}
-- from-bool sl .funct .map = {!!}
-- from-bool sl .deriv = {!!}
-- from-bool sl .is-id = {!!}

-- from-bool : ‚àÄ{a} (S : Sums a) -> change-bool ‚àß a ‚â§ a
-- from-bool S .ap (c , x) = if c then x else Sums.init S
-- from-bool {a} S .map {false , x} (bool-refl , x‚â§y) = ident a
-- from-bool S .map {true  , x} (bool-refl , x‚â§y) = x‚â§y
-- from-bool S .map {false , x} (false<true , x‚â§y) = Sums.init‚â§ S
