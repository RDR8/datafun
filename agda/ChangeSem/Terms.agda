{-# OPTIONS --postfix-projections #-}
module ChangeSem.Terms where

open import Cat
open import ChangeCat
open import ChangeSem.Types
open import Changes
open import Datafun
open import Monads
open import Prelude
open import Prosets
open import TreeSet

 -- Lemmas for semantics of terms
-- ‚ü¶_‚üß is a functor, Cx^op -> Change
comap‚ü¶_‚üß : ‚àÄ{X Y} -> X ‚äÜ Y -> ‚ü¶ Y ‚üß ‚â§ ‚ü¶ X ‚üß
comap‚ü¶ f ‚üß = prefixŒ† {P = ‚ü¶_‚üßv} (‚àÉ-map f)

-- Managing environments.
lookup : ‚àÄ{X x} -> X x -> ‚ü¶ X ‚üß ‚â§ ‚ü¶ x ‚üß‚ÇÅ
lookup p = Œ†e (Var p)

cons : ‚àÄ{X Y} -> ‚ü¶ X ‚üß ‚àß ‚ü¶ Y ‚üß ‚â§ ‚ü¶ Y ‚à™ X ‚üß
cons = Œ†i {P = ‚ü¶_‚üßv} Œª { (, inj‚ÇÅ x) ‚Üí œÄ‚ÇÇ ‚Ä¢ lookup x ; (, inj‚ÇÇ y) ‚Üí œÄ‚ÇÅ ‚Ä¢ lookup y }

singleton : ‚àÄ{x} -> ‚ü¶ x ‚üß‚ÇÅ ‚â§ ‚ü¶ hyp x ‚üß
singleton = Œ†i duh
 where duh : ‚àÄ{x} (v : Vars (hyp x)) -> ‚ü¶ x ‚üß‚ÇÅ ‚â§ ‚ü¶ v ‚üßv
       duh (Var refl) = id

-- Lemmas for wipe‚â§‚ñ°.
Œ†/‚ñ° : ‚àÄ{A} P -> Œ† A (Œª a -> change‚ñ° (P a)) ‚â§ change‚ñ° (Œ† A P)
-- I find this slightly incomprehensible myself.
Œ†/‚ñ° _ = cfun (fun Œ†/‚àß) (œÄ‚ÇÇ ‚Ä¢ fun Œ†/‚àß) (Œ†/‚àß ‚Ä¢ map‚àß id Œ†/‚àß)

Œ†‚â§‚ñ° : ‚àÄ{A P} -> (‚àÄ a -> P a ‚â§ change‚ñ° (P a)) -> Œ† A P ‚â§ change‚ñ° (Œ† A P)
Œ†‚â§‚ñ° {P = P} F = suffixŒ† F ‚Ä¢ Œ†/‚ñ° P

wipevar : ‚àÄ{X} (v : Vars (wipe X)) -> ‚ü¶ v ‚üßv ‚â§ change‚ñ° ‚ü¶ v ‚üßv
wipevar (Var {mono} ())
wipevar (Var {disc} p) = dup Change‚ñ°

wipe‚â§‚ñ° : ‚àÄ{X} -> ‚ü¶ wipe X ‚üß ‚â§ change‚ñ° ‚ü¶ wipe X ‚üß
wipe‚â§‚ñ° = Œ†‚â§‚ñ° wipevar

lambda : ‚àÄ{x} c -> ‚ü¶ hyp x ‚üß ‚á® type c ‚â§ ‚ü¶ x ‚üß‚ÇÅ ‚á® type c
lambda c = precompose {c = type c} singleton


-- -- this is wrong and should be destroyed
-- module _ {A : Change} (f g : ‚ä§-change ‚â§ A) (d : Hom! (‚ä§-change ‚á® A) (funct f) (funct g)) where
--   private instance aaa = A; daa = ùë´ A
--   from-bool : change-bool ‚â§ A
--   from-bool .funct = bool‚áí (Hom!.a‚â§b d _)
--   from-bool .deriv .ap (x , dx) =
--     (if x then g .deriv
--     else if dx then Hom!.path d
--     else f .deriv) .ap _
--   from-bool .deriv .map ((false<true , ()) , _)
--   from-bool .deriv .map ((, refl) , refl) = id
--   from-bool .deriv .map {true , _} ((, refl) , _) = id
--   -- gah! I need to know that (Œ¥f tt ‚â§ d)!
--   from-bool .deriv .map {false , _} ((refl , refl) , false<true) = {!!}
--   from-bool .is-id da:a‚Üíb = {!!}

-- from-bool : ‚àÄ{A a b ida idb da} -> Hom (ùë∂ A) a b
--           -> Path A ida a a -> Path A idb b b -> Path A da a b
--           -> change-bool ‚â§ A
-- from-bool a‚â§b _ _ _ .funct = bool‚áí a‚â§b
-- from-bool {ida = ida} {idb = idb} {da} _ _ _ _ .deriv .ap (x , dx) =
--   if x then idb else if dx then da else ida
-- from-bool _ _ _ _ .deriv .map = {!!}
-- from-bool _ _ _ _ .is-id = {!!}

-- -- Need it to be a decidable semilattice!
-- from-bool : ‚àÄ{a} (S : IsSL a) -> change-bool ‚â§ a ‚á® a
-- from-bool sl .funct .ap false = constant (Sums.init (ùë∂-sums sl))
-- from-bool sl .funct .ap true = {!!}
-- from-bool sl .funct .map = {!!}
-- from-bool sl .deriv = {!!}
-- from-bool sl .is-id = {!!}

-- from-bool : ‚àÄ{a} (S : Sums a) -> change-bool ‚àß a ‚â§ a
-- from-bool S .ap (c , x) = if c then x else Sums.init S
-- from-bool {a} S .map {false , x} (bool-refl , x‚â§y) = ident a
-- from-bool S .map {true  , x} (bool-refl , x‚â§y) = x‚â§y
-- from-bool S .map {false , x} (false<true , x‚â§y) = Sums.init‚â§ S


-- what
boolœÄ : ‚àÄ{A} -> isos bools ‚áí ((A ‚àß A) ‚á® A)
boolœÄ = antisym‚áí antisym:bool‚â§ (Œª x ‚Üí if x then œÄ‚ÇÅ else œÄ‚ÇÇ)

from-bool : ‚àÄ{{A}} {{S : Sums A}} -> bools ‚àß A ‚áí A
from-bool .ap (c , x) = if c then x else init
from-bool .map {false , _} (_ , _) = init‚â§
from-bool .map {true  , x} (refl , x‚â§y) = x‚â§y
-- from-bool .map {false , x} (refl , x‚â§y) = id
-- from-bool .map {false , x} (false<true , x‚â§y) = init‚â§

-- whenn = (x,y) ‚Ü¶ when x then y
-- Œ¥(when x then y) = if x then Œ¥y else when Œ¥x then (y ‚à® Œ¥y)
whenn : ‚àÄ{A} -> class (DEC , SL) A -> (change-bool ‚àß A) ‚â§ A
whenn (dec , sl) .funct = from-bool
whenn (dec , sl) .deriv = map‚àß isos/‚àß id ‚Ä¢ juggle‚àß ‚Ä¢ uncurry {!plus dec!}

-- whenn {A} (dec , sl) .deriv .ap ((false , v) , false , dv) = ùë´-sums sl .Sums.init
-- -- need A = ŒîA. argh.
-- whenn (dec , sl) .deriv .ap ((false , v) , true , dv) = ùë´-sums sl .Sums._‚à®_ {!v!} dv
-- whenn (dec , sl) .deriv .ap ((true , v) , _ , dv) = dv
-- -- probably need something to do with antisymmetry or here.
-- whenn (dec , sl) .deriv .map {(a , x) , (b , y)} {(a' , x') , b' , y'} (((a‚â§a' , x‚â§x') , a'‚â§a , x'‚â§x) , b‚â§b' , y‚â§y') = {!!}

whenn (dec , sl) .is-id = {!!}


-- Semantics of terms
eval  : ‚àÄ{X P} -> X ‚ä¢ P -> ‚ü¶ X ‚üß ‚â§ ‚ü¶ P ‚üß+
eval‚ä© : ‚àÄ{P a} -> P ‚ä© a -> ‚ü¶ P ‚üß+ ‚â§ type a

eval tt = const-cfun TT TT tt
eval (M , N) = ‚ü® eval M , eval N ‚ü©
eval (bind M) = curry (cons ‚Ä¢ eval M)
-- what is the type of comap‚ü¶ extract Wipe ‚üß?
-- is this the only place I use comap‚ü¶_‚üß?
-- Can I specialize it for simpler code?
eval (box M) = comap‚ü¶ extract Wipe ‚üß ‚Ä¢ wipe‚â§‚ñ° ‚Ä¢ map Change‚ñ° (eval M)
eval (form ! M) = eval M ‚Ä¢ eval‚ä© form
eval (var mono p) = lookup p
eval (var disc p) = lookup p ‚Ä¢ extract Change‚ñ°

eval‚ä© (lam {a}{b}) = lambda b
eval‚ä© app = apply
eval‚ä© box = id
eval‚ä© (letbox {a}{b}) = map‚àß id (lambda b) ‚Ä¢ swapply
eval‚ä© pair = id
eval‚ä© (proj true) = œÄ‚ÇÅ
eval‚ä© (proj false) = œÄ‚ÇÇ
eval‚ä© (inj {a}{b} true) = in‚ÇÅ {b = type b}
eval‚ä© (inj false) = in‚ÇÇ
eval‚ä© (case {a}{b}{c})
      = distrib-‚àß/‚à® {a = type a} {b = type b}
           ‚Ä¢ [ map‚àß singleton œÄ‚ÇÅ ‚Ä¢ swapply
             , map‚àß singleton (œÄ‚ÇÇ {a = ‚ü¶ _ ‚üß ‚á® type c}) ‚Ä¢ swapply ]
eval‚ä© splitsum .funct = isos/‚à®
eval‚ä© splitsum .deriv = œÄ‚ÇÇ ‚Ä¢ isos/‚à®
eval‚ä© splitsum .is-id (rel‚ÇÅ x , rel‚ÇÅ y , rel‚ÇÅ z) = rel‚ÇÅ (x , y , z)
eval‚ä© splitsum .is-id (rel‚ÇÇ x , rel‚ÇÇ y , rel‚ÇÇ z) = rel‚ÇÇ (x , y , z)
eval‚ä© (bool x) = const-cfun x false a‚à®‚ä•‚âàa
eval‚ä© if = uncurry (antisym‚ñ°‚â§ antisym:bool‚â§ (Œª x ‚Üí if x then œÄ‚ÇÅ else œÄ‚ÇÇ))
eval‚ä© (when x) = whenn (is! x)
eval‚ä© (single p) .funct = Fun: leaf leaf‚â§
eval‚ä© (single p) .deriv = constant empty
-- this is the functoriality of (- ‚à® ‚ä•)! I think.
-- this pattern comes up somewhere else, but I can't remember where...
-- TODO: simplify
eval‚ä© (single {a} p) .is-id (da:a‚Üíb , a‚âàb) = [ leaf‚â§ a‚âàb , empty‚â§ ]
                                             , leaf‚â§ (swap {{sets}} a‚âàb) ‚Ä¢ in‚ÇÅ
  where instance x = trees (isos (type a .ùë∂))
eval‚ä© (for-in p q) = {!!}
eval‚ä© (bottom sl) = eps (is! sl)
eval‚ä© (join sl) = vee (is! sl)
eval‚ä© (fix is-fix) = {!!}
eval‚ä© (fix‚â§ is-fix‚â§) = {!!}
