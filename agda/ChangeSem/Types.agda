module ChangeSem.Types where

open import Cat
open import ChangeCat
open import Changes
open import Datafun
open import Decidability
open import Monads
open import Prelude
open import Prosets
open import TreeSet

 ---------- Denotations of types & tones ----------
Vars : Cx -> Set
Vars X = ‚àÉ (Œª a -> X a)
pattern Var {o} {a} p = (o , a) , p

type : Type -> Change
type bool = change-bool
type (set a p) = change-tree (change‚ñ° (type a))
type (‚ñ° a) = change‚ñ° (type a)
type (a ‚äÉ b) = type a ‚á® type b
type (a * b) = type a ‚àß type b
type (a + b) = type a ‚à® type b

‚ü¶_‚üß‚ÇÅ : Tone √ó Type -> Change
‚ü¶ mono , a ‚üß‚ÇÅ = type a
‚ü¶ disc , a ‚üß‚ÇÅ = change‚ñ° (type a)

‚ü¶_‚üß : Cx -> Change
‚ü¶_‚üß+ : Premise -> Change
‚ü¶ X ‚üß = changeŒ† (Vars X) (Œª v -> ‚ü¶ proj‚ÇÅ v ‚üß‚ÇÅ)
‚ü¶ nil ‚üß+    = ‚ä§-change
‚ü¶ P , Q ‚üß+  = ‚ü¶ P ‚üß+ ‚àß ‚ü¶ Q ‚üß+
‚ü¶ ‚ñ° P ‚üß+    = change‚ñ° ‚ü¶ P ‚üß+
‚ü¶ X ‚ñ∑ P ‚üß+  = ‚ü¶ X ‚üß ‚á® ‚ü¶ P ‚üß+
‚ü¶ term a ‚üß+ = type a

 -- What does it mean for a type's denotation to be a semilattice?
record Semilat (A : Change) : Set where
  field vee : A ‚àß A ‚â§ A
  field eps : ‚ä§-change ‚â§ A
  -- Do I need a proof that _‚à®_ actually is a semilattice on (ùë∂ A)?
open Semilat public

module _ (A : Proset) (S : Sums A) where
  private instance aa = A; ss = S; instance isosaa = isos A
  -- For any change structure where ‚äï = ‚à®, we have Œ¥(a ‚à® b) = Œ¥a ‚à® Œ¥b.
  -- TODO: rename
  flub : Semilat (change-SL A S)
  flub .vee .func = Sums.‚à®-functor S
  flub .vee .deriv = œÄ‚ÇÇ ‚Ä¢ Sums.‚à®-functor S
  flub .vee .is-id (p , q) = juggle‚à®‚âà ‚Ä¢ ‚à®‚âà p q
  flub .eps .func = constant (init {{A}})
  flub .eps .deriv = constant (init {{A}})
  flub .eps .is-id tt = ‚à®-idem , in‚ÇÅ

 ---------- Semantics of type-classes ----------
class : Class -> Change -> Set
class (c , d) A = class c A √ó class d A
-- If I were to add equality testing as an expression, I'd need that equality
-- has a derivative, which shouldn't be hard to prove.
class DEC A  = Decidable (Hom (ùë∂ A))
class SL  A  = Semilat A
class FIN A  = TODO
class ACC A  = TODO
class ACC‚â§ A = TODO

is! : ‚àÄ{C a} -> Is C a -> class C (type a)
is! {c , d} (x , y) = is! x , is! y

is! {DEC} bool = bool‚â§?
is! {DEC} (set a p) = tree‚â§? _ (isos‚â§? (type a .ùë∂) (is! p))
is! {DEC} (‚ñ° a p) = isos‚â§? (type a .ùë∂) (is! p)
is! {DEC} (a * b) = decidable√ó (is! a) (is! b)
is! {DEC} (a + b) = decidable+ (is! a) (is! b)

is! {SL} bool = flub it it
is! {SL} (set a) = flub (trees _) (tree-sums _)
is! {SL} (a * b) = {!!}
is! {SL} (a ‚äÉ b) = {!!}

is! {FIN} a = TODO
is! {ACC} a = TODO
is! {ACC‚â§} a = TODO

